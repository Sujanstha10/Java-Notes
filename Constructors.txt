********************************** Constructors ********************************
Once we create an object, compulsory we should perform initialization. Then only the object is in a position to respond properly.
Whenever we are creating an object, some piece of the code will be executed automatically to perform initialization of the object.
This piece of the code is nothing but Constructor.
Hence,the main purpose of Constructor is to perform initialization of an object.

package pack1;
class Program{
  String name;
  int rollno;
  Program(String name, int rollno){     //this is Constructor
    this.name=name;
    this.rollno=rollno;
  }
    public static void main(String[] args){
      Program p1 = new Program("John", 101);
      Program p2 = new Program("Doe", 102);
      System.out.println(p1.name+" "+p1.rollno);
      System.out.println(p2.name+" "+p2.rollno);
    }
}

Note: The main purpose of Constructor is to perform initialization of an object but not to create an object.


**************** Diff between Constructor and Instance Block **********************
i. The main purpose of Constructor is to perform initialization of an object
   but other than initialization if we want to perform any activity for every object creation then we should go for Instance Block (like updating one entry in database for every object creation, incrementing count value for every object creation).

ii. Both Constructor and Instance Block have their own different purposes and replacing one concept with another concept may not work always.
iii. Both Constructor and Instance Block will be executed for every object creation but Instance Block first followed by Constructor.


---------Demo program to print no. of object created for a class -------
class Program{
  static int count = 0;
  {
    count++;
  }
  Program(){

  }
  Program(int i){

  }
  Program(double d){

  }
  public static void main(String[] args){
    Program t1 = new Program();
    Program t2 = new Program(10);
    Program t3 = new Program(10.5);
    System.out.println("The no. of objects created is "+ count);  //output: The no. of objects created is 3
  }
}


RULES:
i. Name of the class and name of the constructor must be matched.
ii. Return type concept not applicable for constructor even void also
iii. By mistake if we are trying to declare return type of constructor then we won't get any compile-time error because compiler treats it as a method.
    For eg: 
    class Program{
      void Program(){
        //it is a method not a constructor
      }
    }

Hence, it is legal(but stupid) to have a method whose name is exactly same as class name.
  For eg:
class Program{
  void Program(){
    System.out.println("This is a Method but not a constructor");
  }
  public static void main(String[] args){
    Program t1 = new Program();
    t1.Program();
  }
}
iv. The only applicable modifiers for Constructors are public,private,protected,default. If we are trying to use any other modifier , we will get compile-time error.
v. Compiler is responsible to generate default constructor (but not JVM). 
vi. If we are not writing any constructor then only compiler will generate default constructor. i.e. if we are writing at least one constructor then compiler won't generate default constructor. Hence, every class in Java can contain constructor . It may be default constructor generated by Compiler or customized constructor explicitly provided by programmer but not both simultaneously.



*************** Overloaded Constructor *********
Within a class , we can declare multiple Constructors and all these Constructors having same name but different type of arguments. Hence all these Constructors are considered as Overloaded Constructors.
Hence, Overloading concept applicable for Constructors.
For example:
class Program{
   Program(){
    System.out.println("This is a  constructor 1st");
  }
  Program(int i){
    System.out.println("This is a constructor 2nd");
  }
  Program(double i){
    System.out.println("This is a constructor 3rd");
  }

  public static void main(String[] args){
    Program t1 = new Program();
    Program t2 = new Program(10);
    Program t3 = new Program(10.5);
  }
}
 Output:
This is a  constructor 1st
This is a constructor 2nd
This is a constructor 3rd

RULES:
i. For Constructors, inheritance and over-riding concepts are not applicable but Overloading concept is applicable.
ii. Every class in java including abstract class can contain Constructors but Interface cannot contain constructor.
    For eg:
    class Test{
      Test(){

      }
    }

    abstract class Test{
      Test(){

      }
    }
    
    interface Test{
      Test(){
        //invalid
      }
    }

Case i. 

