*************************** METHOD SIGNATURE ********************
Method Signature consists of method names followed by argument types.
public static int m1(int i, float f)
=> m1(int, float)
Return type is not part of method-Signature in java.
-Compiler will use method Signature to resolve method calls.

class Test{
  public void m(int i){

  }
  public void m2(String s){

  }
}

Test t = new Test();
t.m1(10);
t.m2("aashish");
t.m3(10.5) //CE: cannot find symbol Symbol:method m3(double) location:class Test

Within a class, two method with a same signature, not allowed. 
package pack1;
class Program{
  public int m2(int i){
    return 10;
  }
  public int m2(int i){  //CE: method m2(int) is already defined in class Program
    return 20;
  }
  public static void main(String[] args) {

  }
}



************************ METHOD OVERLOADING *****************************
Two methods are said to be over-loaded if and only if both methods having same name but different argument types.
In C language , method over-loading concept is not available. Hence,we can't declare multiple methods with same name but different argument types. If there is change in argument  type, compulsory we should go for new method  name which increases complexity of programming.
Example:
abs(int i);
labs(long l);
fabs(float f);
But in Java, we can declare multiple methods with same name but different argument types . Such types of methods are called over-loaded methods.
Example:
abs(int i);
abs(long l);
abs(float f);
Having over-loading concept in Java reduces complexity of programming. 


----------Automatic promotion in OVERLOADING:--------------
i. While resolving overloaded methods, if exact matched methods are not available, then we won't get any compile-time error immediately. First it will promote argument to next level and check whether matched method is available or not. If matched method is available then it will be considered. If matched method is not available then Compiler promotes once again to level . This process will be continued untill all possiblee promotions. Still if the matched method is not available then we will get compile time error. 
The following are all possible promotions in OVERLOADING. 
byte -> short -> int -> long -> float -> double, char -> int
This process is called Automatic Promotion in OVERLOADING.

class Test{
  public int m1(int i){
    Sopln("int-arg");
  }
  public void m1(float i){
    Sopln("float-arg");
  }
}
public static void main(String[] args){
  Test t = new Test();
  t.m1(10); //int-arg
  t.m1(10.5f); //float-arg
  t.m1('a'); //int-arg
  t.m1(10l); //float-arg
  t.m1(10.5); //CE: no suitable method found for m1(double)  location: class Test
}


---------------
class Test{
  public void m1(String s){
    Sopln("String version");
  }
  public void m1(Object s){
    Sopln("Object version");
  }
}
public static void main(String[] args){
  Test t = new Test();
  t.m1(new Object()); //Object version
  t.m1("aashish");  //String version
  t.m1(null);  //String version
}
Note: While resolving overloaded methods, compiler will always give the precedence for child-type argument and compare with parent-type argument.

------------------
class Test{
  public void m1(String s){
    Sopln("String version");
  }
  public void m1(StringBuffer sb){
    Sopln("StringBuffer version");
  }
}
public static void main(String[] args){
  Test t = new Test();
  t.m1("aashish");  //String version
  t.m1(new StringBuffer("aashish")); //StringBuffer version
  t.m1(null);  //CE: reference to m1() is ambiguous.
}
Note: String and StringBuffer are both child of Object class . so , which method to run, there can be ambiguity.



***************************************Over-Riding************************************************
Whatever methods parent has by default available to the child through inheritance. If child class not satisfied with parent class implementation then child is allowed to re-define that method based on the requirement. This process is called over-riding.
The parent class method which is over-ridden is called Over-ridden method and the child class method which is over-riding is called over-riding method.
Example:
class P{
  public void Property(){
    Sopln("Cash + Land + Gold);
  }
  public void Marry(){
    Sopln("Subha Laxmi");
  }
}
class C extends P{
  public void Marry(){
    Sopln("3sh + 4me + 9tma");
  }
}

---

class P{
  public void Property(){
    System.out.println("Cash" + "Land" + "Gold");
  }
  public void Marry(){
    System.out.println("Subha Laxmi");
  }
}
class C extends P{
  public void Marry(){
    System.out.println("3sh + 4me + 9tma");
  }
}
public class Program {
    public static void main(String[] args) {
      P p = new P();
      p.Marry();
      C c = new C();
      c.Marry();
      P p1 = new C();
      p1.Marry();
    }
}
Note: In overriding , method resolution always takes care by JVM based on runtime object and hence overiding is also considered as runtime polymorphism or dynamic polymorphism or late binding.

---------------------------RULES OF OVER-RIDING---------------------------
i. In Overriding, Method name and argument types must be matched. i.e method signatures must be name.
ii.In Overriding, return type must be same but this rule is applicable untill 1.4 version only but from 1.5 version onwards we can take co-variant return type. Acc. to this, child class method return type need not be same as Parent method return type. It's child type also allowed.
    Exampele:
    class P{
      public Object m1(){
        return null;
      }
    }
    class C extends P{
      public String m1(){
        return null;
      }
    }

iii. Co-variant return type concept applicable only for Object types but not for primitive types.
Another,
parent class method return type: Object
Child class method return type: Object|String|StringBuffer

Another,
parent class method return type: Number
Child class method return type: Number|Integer|StringBuffer

Another,
parent class method return type: Double
Child class method return type: float
// this last one is not applicable.

iv. Parent class private methods not available to the child and hence  overiding concept not applicable for private methods.
  Based on our requirement , we can define exactly same private method in child class. It is valid but not over-riding . 
  class P{
    private void m1(){

    }
  }
  class C extends P{
    private void m1(){

    }
  }

v. WE can't override parent class final methods in child classes. If we are trying to override , we will get compile-time error.
  Example: 
    class P{
    public final void m1(){

    }
  }
  class C extends P{
    public void m1(){

    }
  }

vi. Parent class abstract methods we should override in child class to provide implementation.
  Example:
  abstract class P{
    public abstract void m1();
  }
  class C extends P{
    public abstract void m1(){

    }
  }

vi. We can override non-abstract method as abstract. the main advantage of this method is we can stop the availability of parent method implementation to the next level child classes.
  Example:
  class P{
    public void m1(){

    }
  }
  abstract class C extends P{
    public abstract void m1();
  }


vii. While overriding , we can't reduce scope of access modifier but we can increase the scope.
  Example:
  class P{
    public void m1(){

    }
  }
  class C extends P{
    void m1(){

    }
  }
  //CE: m1() in C cannot override m1() in P; attempting to assign weaker access privileges; was public


viii. If child class method throws any checked exception compulsory parent class method should throw the same checked exception or it's parent otherwise we will get compile-time error but there are no restrictions for unchecked Exceptions.



************** DIFFERENCES BETWEEN OVERLOADING AND OVERRIDING ****************************
Overloading:
i. Method name must be same 
ii. Argument type must be different (at least order)
iii. Method Signature must be different
iv. Return types no restrictions
v. Private,Static,Final methods can be overloaded.
vi. Access modifiers no restrictions.
vii. Method resolutions always takes care by compiler based on Reference Types.
viii. It is also known as compile-time polymorphism or static polymorphism or earyly binding.

OverRiding:
i. Method name must be same 
ii. Argument type must be same (including order)
iii. Method Signature must be same
iv. Return types must be same untill 1.4 version . From 1.5 version, co-variant return types are allowed.
v. Private,Static,Final methods cannot be overridden.
vi. The scope of Access modifier can not be reduced but can be increased.
vii. Method resolutions always takes care by JVM based on Runtime Object.
viii. It is known as Runtime polymorphism, dynamic polymorphism or late binding.


NOTES:: OVERLOADING and OverRiding concepts are known as Polymorphism concepts.