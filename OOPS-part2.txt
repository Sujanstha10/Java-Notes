******************************* Inheritance ***********************************
******************************* IS A Relationship ***********************************
The main advantage of IS-A-Relationship is Code Reusability. 
By using extends keyw ords we can implement IS-A-Relationship.
class P{
  public void m1(){
    System.out.println("Parent");
  }
}
class C extends P{
  public void m2(){
    System.out.println("child");
  }
}
--------------------------------------------------
package pack1;
class A{
  public void m1(){
    System.out.println("m1 method");
  }
}
class Program extends A{
  public void m2(){
    System.out.println("m2 method");
  }
  public static void main(String[] args) {
    A p = new A();
    p.m1();
    p.m2();  //cannot find symbol symbol: method m2()  location: class A

    Program pp = new Program();
    pp.m1();
    pp.m2();

    A ppp = new Program();
    ppp.m1();
    ppp.m2(); //cannot find symbol symbol: method m2() location: variable ppp of typeA
  }
}
----------------------------------------------------
CONCLUSIONS:
i. Whatever methods parent has , by default available to the child and hence, on the child reference we can call both parent and child class methods.
ii. Whatever methods child has, by default not available to the parent and hence, on parent reference we can't call child specific methods.
iii. Parent reference can be used to hold child object but by using that reference we can't call child specific methods but we can call methods present in parent class.
iv.Parent reference can be used to hold child object but child reference cannot be used to hold parent object.

Example without Inheritance
class VLoan{
  300 methods
}
class HLoan{
  300 methods
}
class PLoan{
  300 methods
}

Example using Inheritance
class Loan{
  250 common methods
}
class VLoan extends Loan{
  50 specific methods
}
class HLoan extends Loan{
  50 specific methods
}
class PLoan extends Loan{
  50 specific methods
}

The most common methods which are applicable for any type of child , we have to define in parent class.
The specific methods which are applicable for a particular child, we have to define in child class.

Total Java API is implemented based on inheritance concept. The most common methods which are applicable for any java object are defined in Object class and hence, every class in java is a child class of object either directly or indirectly so that object class methods by default available to every java class without re-writing.
Due to this, object class acts as root for all java classes.
Throwable class defines the most common methods for every Exception and Error classes . Hence, this class acts as root for Java Exception Hierarchy.

**************** Multiple Inheritance ******
A java class can't extend more than one class at a time. Hence, Java won't provide support for Multiple inheritance in respect to classes.
class A extends B,C{
  //wrong
}
NOTE: If our class doesn't extend any other class then only our class is direct child class of Object.
NOTE: If our class extends any other class then our class is indirectly child class of object.

NOTE: Either direct or indirectly Java won't provide support for multiple inheritance with respect to classes.

Why Java won't provide support for multiple inheritance ?
=> There may be a chance of ambuiguity problem. Hence, Java won't provide support for multiple inheritance.
--class P contain m1 method and class Q contain m1 method and C extends P and Q classes.. now which m1() method do C inherit. so ambuiguity rises.


But interface can extend any number of interfaces simultaneously. Hence, Java provide support for multiple inheritance with respect to interfaces.
interface A{
  
}
interface B{

}
interface C extends A,B{

}

Why ambuiguity problem won't be there for interfaces ?
=>  Even though multiple method declarations are available but implementation is unique and hence there is no chance of ambuiguity problem in interfaces.

NOTE: Strictly speaking, Through interface, we won't get any inheritance.

******************* Cyclic inheritance ********************************
Cyclic inheritance is not allowed in Java. Of course, it's not required in Java.
=> class A extends A{

 }
  class A extends B{

  }
  class B extends A{

  }
Compilation Error rises saying: cyclic inheritance involving A.
  


