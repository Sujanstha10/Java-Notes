******************** Thread Priorities ***************************
Every thread in java has some priority. 
It may be default priority generated by JVM or cutomized priority provided by programmer.
The valid range of Thread Priorities is from 1 to 10 where 1 is min-priority and 10 is max-priority.

Thread class defines the following constants to represent some standard Priorities.
Thread.MIN_PRIORITY => 1
Thread.NORM_PRIORITY => 5
Thread.MAX_PRIORITY => 10

Thread Scheduler will use priorities while allocating processor.
The thread which is having highest priority will get chance first.
-If two threads having same priority then we can't expect execution order, it depends Thread Scheduler.

Thread class defines the following methods to get and set priority of a Thread.
i. public final int getPriority()
ii. public final void setPriority(int P)

Allowed values
Range: 1 to 10
Otherwise RuntimeException: IllegalArgumentException

Example:
t.setPriority(7); //valid
t.setPriority(12); //invalid  RE:IllegalArgumentException

*********************** Default Priority **************
The default priority only for the main thread is 5
But for all remaining threads , default priority will be inherited from parent to child. i.e. whatever priority parent thread has , the same priority will be there for child thread.

class Program {
  public static void main(String[] args){
   System.out.println(Thread.currentThread().getPriority());  //5
   Thread.currentThread().setPriority(10);
   Thread.currentThread().setPriority(15); // RE: IllegalArgumentException
   myThread t = new myThread();
   System.out.println(t.getPriority());  //10
   System.out.println(Thread.currentThread().getPriority()); //10
  }
}

  class myThread extends Thread{
   
  }


**********************************************
class Program {
  public static void main(String[] args){
    myThread t = new myThread();
    t.setPriority(7);
    t.start();
    for(int i=0;i<10;i++){
      System.out.println("Main Thread");
    }
  }
}

  class myThread extends Thread{
   public void run(){
      for(int i=0;i<10;i++){
        System.out.println("Child Thread");
      }
   }
  }
If we are commenting line 5 , then both main and child threads have the same priority 5 and Hence, we can't expect execution order and exact output.
If we are not commenting line 5, then main thread has a priority 5 and child thread has priority of 10.
Hence, child thread will get the chance first followed by main thread.
In this case , output is :
Child Thread
Child Thread
  .
  .
  10 times
Main Thread
Main Thread
  .
  .
 10 times


NOTE: Some platforms won't provide support for Thread priorities.
If in our system if we don't get the above expected outcome then there is problem in the system not in the program.
