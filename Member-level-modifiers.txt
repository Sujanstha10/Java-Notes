**********************************strictfp[strict floationg point]*********************************
Introduced in 1.2 version
We can declare striptfp for classes and methods but not for variables.
Usually the result of floationg point arithmetic is varied from platform to platform , if we want platform independent result for floationg point arithmetic then we should go for strictfp MODIFIER.

*************strictfp method**************
If a method declared as strictfp , all floationg point calculations in that method has to follow IEEE-754 standard. so that we will get platform independent result.
Abstract modifier never talks about implementation whereas strictfp method always talks about implementation , hence Abstract-strictfp combination is illegal for methods.

*************strictfp method**************
If a class declared as strictfp then , then every floating point calculations present in concrete method has to followe IEEE-754 standard so that we will get platform-independent result.
We can declare abstract-strictfp combination for classes . i.e. abstract-strictfp legal for classes but illegal for methods.

For example:
abstract strictfp void Test{

} //valid

abstract strictfp void m1();
// CE: illegal combination of modifiers: abstract and strictfp


***********************************MEMBER MODIFIER (method or variable level modifiers)****************************
---Public modifier----
a. If a member declared as public then we can access that member from anywhere. But corresponding class should be visible. i.e. before checking member visibility , we have to check class visibility.
For example:
here, we are importing class Programs from package pack2  and we are using public m1 method in class Program, but it is not accessible. so we have to declare Programs class as public too to access public m1() method too.

package pack1;
import pack2.Programs;
class Program{
    public static void main(String[] args){
        Programs p = new Programs();
        p.m1();
    }
}

package pack2;
 class Programs{
    public void m1(){
      System.out.println("Programs method it is ");
    }
}
//here  class Programs should also be made public to access public m1() method from other classes. i.e. methoad and class both should be public.
If the class is public , but the method is not public then the method can't be accessed from any other class. Compile-time error rises saying:
//m1() is not public in Programs; cannot be accessed from outside package

---Default member----
If  a member declared as default, then we can access that member only within the current package. i.e. we can't access outer package. 
Hence, default access is also known as package-level-access.

--Private Member---
If a member is private , we can access that member only within the class. i.e. from outside of the class, we can't access.
i. Abstract methods should be available to the child classes to provide implementation whereas private methods are not available to the child classes. Hence , private-abstract combination is illegal for methods.

--Protected Members(the most misunderstood modifier in java)--
If a member declared as protected, we can access that member anywhere in the current package but only in child class of outside package.
We can access protected members within the current package anywhere either by using parent reference or child reference. but we can access protected members only in child classes and we should use child reference only. i.e. parent reference cannot be used to access protected members from outside package.
For example:
package pack2;
public class Programs{
    protected void m1(){
      System.out.println("Programs method it is ");
    }
}

package pack1;
import pack2.Programs;
class Program extends Programs{
        public void sum(){
        System.out.println("Sum method it is ");
    }
    public static void main(String[] args){
        Programs p = new Programs();
        p.m1();  //here protected method m1() is being accessed outside of package and even if this is child class it can't be used. CE occurs saying: m1() has protected access in Programs.
        Program p2 = new Program();
        p2.sum();
        p2.m1(); // here we can access protected method m1() from the child class which is outside of package. 
    }
}

//if this child class was in same package then we can use parent class reference to access protected members too.

WE can access protected members only in child classes only and we should use that child class only.
From D class if we wan't to access, we should use D class reference only.
For example::

package pack2;
import pack1.A;
class C extends A{

}
class D extends C{
  public static void main(String[] args){
    A a = new A();
    a.m1();

    C c = new C();
    c.m1();

    D d = new D();
    d.m1();  // This is valid, other all are invalid, Compilation error will occur saying: CE: m1() has protected access in pack1.A

    A a1 = new C();
    a1.m1();

    A a1 = new D();
    a1.m1();

    C c1 = new D();
    c1.m1();
  }
}


-----------------------VISIBILITY OF MEMBER MODIFIERS---------------
Private:
a. Within the same class = yes
b. From child class of same package = no
c. From non-child class of same package = no
d. From child class of outside package = no
e. From non-child class of outside package = no

<default>:
a. Within the same class = yes
b. From child class of same package = yes
c. From non-child class of same package = yes
d. From child class of outside package = no
e. From non-child class of outside package = no

Protected:
a. Within the same class = yes
b. From child class of same package = yes
c. From non-child class of same package = yes
d. From child class of outside package = yes but [we should use child reference only]
e. From non-child class of outside package = no

Public:
a. Within the same class = yes
b. From child class of same package = yes
c. From non-child class of same package = yes
d. From child class of outside package = yes
e. From non-child class of outside package = yes


NOTES:
a. The most restricted modifier is private.
 The most accessible modifier is public.
 Order:
  private<default<protected<public

b. Recommended modifier for data member(variable) is private BUT  Recommended modifier for methods is public.


