****************************** Coupling ************************************
The degree of dependency between the components is called coupling.
If dependency is more then it is considered as tightly coupling and if dependency is less then it is considered as loosely coupling.
Example: 
class A{
  static int i = B.j
}
class B{
  static int j = C.k;
}
class C{
  static int k = D.m1();
}
class D{
  public static int m1(){
    return 10;
  }
}
The above components are said to be tightly coupled with each other because dependency between the components is more.
Tightly coupling is not a good programming practice because it has serious disadvantages:
i. Without affecting remaining components, we can't modify any components.
ii. Without affecting remaining components, enhancement become difficult.
iii. It suppresses Re-usability.
iv. It reduces maintainability of the application.
Hence, we have to maintain dependency between the components as less as possible. i.e. loosely coupling.
Loosely Coupling is a goood programming practice.

****************************** Cohesion ************************************
For every component , a clear well defined functionality is defined then that component is said to follow High Cohesion.
For example:
There is a Total Servet Component, and there is 70 lakhs of code and that component contains all the logic of login-page, validation, inbox,reply,compose,error. So this is low cohesion.
So, for high cohesion we should seperate a clear well defined functionality for each component. like login functionality in login component and validation in validation component.
High cohesion is always good programming practice because it has several advantages:
i. Without affecting remaining components, we can modify any component. Hence, enhancement will become easy.
ii. It promotes re-usability of the code (whereever validation is required we can re-use the same Validate Servet without re-writing ).
iii. It improves maintainability of the application.

NOTES: Loosely Coupling and High Cohesion are good programming practices.






