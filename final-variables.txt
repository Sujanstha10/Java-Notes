********************FINAL VARIABLES****************
a. Final Instance Variables
=>
i. If the value of the variable is varies from object to object, such type of variables are called instance variables.
ii. For every object, a separate copy of instance variables will be created.
iii. For instance variables, we are not required to perform initialization explicitly. JVM will always provide default values.
  For example: 
package pack1;
class Program{
    int x;
    public static void main(String[] args){
        Program p = new Program();
        System.out.println(p.x); //output: 0
    }
}

iv. If the instance variable declared as final, then compulsory we have to perform initialization explicitly whether we are using or not and JVM won't provide default values.
For example:
package pack1;
class Program{
       final int x;
    public static void main(String[] args){
        Program p = new Program();
        System.out.println(p.x);  //CE: variable x not initialized in the default constructor.
    }
}

RULES::
i. For final instance variables, compulsory we should perform initialization before constructor completion.
  i.e. the following are various places for initialization.
  a. At the time of declaration.
    class Test{
      final int x = 10;
    }

  b. Inside instance block
    class Test{
      final int x;
      {
        x = 10;
      }
    }

  c. Inside constructor
    class Test{
      final int x;
      Test(){
        x = 10;
      }
    }
These are the only possible places to perform initialization for final instance variables . If we are trying to perform initialization anywhere else then we will get compile-time error.
For example:
package pack1;
class Program{
       final int x;
        public void m1(){
            x=10;  //here CE: cannot assign a value to final variable x
        }
    public static void main(String[] args){
    }
}



b. final static variables
=> 
i. If the value of the variable is not varied from object to object , such type of variable not recommended to declare as instance variables.
ii. We have to declare those variables at class level by using static modifier.
iii. In the case of instance variables. For every object, a separate copy will be created but in the case of static variables, a single copy will be created at class level and shared by every object of that class.
iv.For static variables , it is not required to perform initialization explicitly. JVM will always provide default values.
For example:
package pack1;
class Program{
       static int x;
    public static void main(String[] args){
        System.out.println(x);  //output: 0
    }
}

v. If a static variable declared as final then compulsory we should perform initialization explicitly otherwise we will get compile-time error and JVM won't provide any default values.
For example:
package pack1;
class Program{
     final static int x;
    public static void main(String[] args){
        System.out.println(x); //CE: variable x not initialized in the default constructor
    }
}

RULES:
a. For final static variables compulsory we should perform initialization before class loading completion.i.e. the following are only possible places to perform initialization for final static variables:
  i. At the time of declaration
    class Program{
      final static int x = 10;
    }

  ii. Inside Static block
    class Program{
      final static int x;
      static
      {
        x = 10;
      }
    }

Above two are only possible places to perform initialization to final static variabes. If we try to perform initialization anywhere else then compile-time error rises saying: cannot assign a value to final variable x
package pack1;
class Program{
     final static int x;
     final static void m1(){
        x = 10;  //CE: cannot assign a value to final variable x
     }
    public static void main(String[] args){
    }
}



c. Final Local Variables
=>
Sometimes to meet temporary requirements of programmer , we have to declare variables inside a method or block or constructor. Such types of variables are called local variables/temporary/stack/automatic variables.
i. For local variables, JVM won't provide any default values,, compulsory we should perform initialization explicitly before using that local variable. i.e. if we are not using then it is not required to perform initialization for local variables.
  For example:
  package pack1;
class Program{
    public static void main(String[] args){
        int x ;
        System.out.println("Hello"); //compiles fines and runs. Output:Hello
    }
}

package pack1;
class Program{
    public static void main(String[] args){
        int x ;
        System.out.println(x);  CE: variable x might not have been initialized
    }
}

ii. Even though local variable is final before using only we have to perform initialization .
If we are not using then it is not required to perform initialization even though it is final.
For example:
package pack1;
class Program{
    public static void main(String[] args){
        final int x ;
        System.out.println("Hello");
    }
}

iii. The only applicable modifier for local variable is final. By mistake if we are trying to apply any other modifier then we will get compile-time error.
For example:
package pack1;
class Program{
    public static void main(String[] args){
        public int x; //here compile-time error occurs saying CE: illegal start of expression
        System.out.println("Hello"); 
    }
}


NOTES::
a. If we are not declaring any modifier then by default it is default but this rule is applicable only for instance and static variables but not for local variables.
b. Formal parameters simply acts as local variables of that method. Hence, formal parameter can be declared as final. If formal parameter declared as final then within a method we can't perform re-assignment.
For example:
class Test{
  public static void main(String[] args){
    m1(10,20);
  }
  public static void m1(int x,int y){
    x=100;
    y=100;
    System.out.println(x+"..."+y);
  }
}












